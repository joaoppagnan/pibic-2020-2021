# bibliotecas gerais
import numpy as np
import pandas as pd

# bibliotecas dos graficos
import matplotlib.pyplot as plt
import seaborn as sns

# agora, melhoramos a qualidade de saida e de visualizacao da imagem 
# alem de mudar a fonte padrao para uma do latex
sns.set_style("ticks")
plt.rcParams['savefig.dpi'] = 200
plt.rcParams["figure.dpi"] = 150
plt.rcParams.update({
    "text.usetex": True,
    "font.family": "serif",
    "font.serif": ["Palatino"],
})
#plt.style.use("dark_background")

print("Insira o número do modelo para gerar os gráficos")
print("1: MLP, 2: LSTM, 3: GRU, 4: ESN, 5: Comparativo")
model = input()

# --------------- MLP --------------- #
if (int(model) == 1):
    print("Gerando os gráficos para a MLP")
    print("Extraindo os dados...")
    
    # carrega os dados
    dados_henon = pd.read_csv('data/predictions/mlp-basica/henon.csv')
    dados_logistic = pd.read_csv('data/predictions/mlp-basica/logistic.csv')
    dados_lorenz = pd.read_csv('data/predictions/mlp-basica/lorenz.csv')
    dados_mackeyglass = pd.read_csv('data/predictions/mlp-basica/mackeyglass.csv')

    # henon 
    n_henon = pd.DataFrame(dados_henon, columns=['n']).to_numpy()
    n_henon = n_henon.ravel()
    y_henon_teste = pd.DataFrame(dados_henon, columns=['y_teste']).to_numpy()
    y_henon_teste = y_henon_teste.ravel()
    y_henon_pred = pd.DataFrame(dados_henon, columns=['y_pred']).to_numpy()
    y_henon_pred = y_henon_pred.ravel()

    # logistic    
    n_logistic = pd.DataFrame(dados_logistic, columns=['n']).to_numpy()
    n_logistic = n_logistic.ravel()
    y_logistic_teste = pd.DataFrame(dados_logistic, columns=['y_teste']).to_numpy()
    y_logistic_teste = y_logistic_teste.ravel()
    y_logistic_pred = pd.DataFrame(dados_logistic, columns=['y_pred']).to_numpy()
    y_logistic_pred = y_logistic_pred.ravel()

    # lorenz    
    t_lorenz = pd.DataFrame(dados_lorenz, columns=['t']).to_numpy()
    t_lorenz = t_lorenz.ravel()
    y_lorenz_teste = pd.DataFrame(dados_lorenz, columns=['y_teste']).to_numpy()
    y_lorenz_teste = y_lorenz_teste.ravel()
    y_lorenz_pred = pd.DataFrame(dados_lorenz, columns=['y_pred']).to_numpy()
    y_lorenz_pred = y_lorenz_pred.ravel()    

    # mackeyglass    
    t_mackeyglass = pd.DataFrame(dados_mackeyglass, columns=['t']).to_numpy()
    t_mackeyglass = t_mackeyglass.ravel()
    y_mackeyglass_teste = pd.DataFrame(dados_mackeyglass, columns=['y_teste']).to_numpy()
    y_mackeyglass_teste = y_mackeyglass_teste.ravel()
    y_mackeyglass_pred = pd.DataFrame(dados_mackeyglass, columns=['y_pred']).to_numpy()
    y_mackeyglass_pred = y_mackeyglass_pred.ravel()
    print("Dados extraídos!")

    # gerando os graficos
    # henon
    print("Gerando os gráficos para o mapa de Hénon...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    ax.plot(n_henon, y_henon_pred, color='tab:blue', label='MLP')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4900, n_henon[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/mlp-basica/performance/mlp-basica-vs-henon.pdf")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    ax.plot(n_henon, y_henon_pred, color='tab:blue', label='MLP')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4980, n_henon[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/mlp-basica/performance/mlp-basica-vs-henon-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    axs[0].plot(n_henon, y_henon_pred, color='tab:blue', label='MLP')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x[n]$')
    axs[0].set_xlabel('$n$')
    axs[0].set_xlim(4900, n_henon[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    axs[1].plot(n_henon, y_henon_pred, color='tab:blue', label='MLP')
    axs[1].set_ylabel('$x[n]$')
    axs[1].set_xlabel('$n$')
    axs[1].set_xlim(4980, n_henon[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/mlp-basica/performance/mlp-basica-vs-henon-merged.pdf")        

    # logistic
    print("Gerando os gráficos para o mapa logístico...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    ax.plot(n_logistic, y_logistic_pred, color='tab:blue', label='MLP')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4900, n_logistic[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/mlp-basica/performance/mlp-basica-vs-logistic.pdf")
    fig, ax = plt.subplots(figsize=(12, 8))
    ax.plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    ax.plot(n_logistic, y_logistic_pred, color='tab:blue', label='MLP')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4980, n_logistic[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/mlp-basica/performance/mlp-basica-vs-logistic-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    axs[0].plot(n_logistic, y_logistic_pred, color='tab:blue', label='MLP')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x[n]$')
    axs[0].set_xlabel('$n$')
    axs[0].set_xlim(4900, n_logistic[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    axs[1].plot(n_logistic, y_logistic_pred, color='tab:blue', label='MLP')
    axs[1].set_ylabel('$x[n]$')
    axs[1].set_xlabel('$n$')
    axs[1].set_xlim(4980, n_logistic[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/mlp-basica/performance/mlp-basica-vs-logistic-merged.pdf")    

    # lorenz
    print("Gerando os gráficos para o sistema de Lorenz...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    ax.plot(t_lorenz, y_lorenz_pred, color='tab:blue', label='MLP')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(t_lorenz[0], t_lorenz[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/mlp-basica/performance/mlp-basica-vs-lorenz.pdf")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    ax.plot(t_lorenz, y_lorenz_pred, color='tab:blue', label='MLP')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(47, t_lorenz[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/mlp-basica/performance/mlp-basica-vs-lorenz-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    axs[0].plot(t_lorenz, y_lorenz_pred, color='tab:blue', label='MLP')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x[n]$')
    axs[0].set_xlabel('$n$')
    axs[0].set_xlim(t_lorenz[0], t_lorenz[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    axs[1].plot(t_lorenz, y_lorenz_pred, color='tab:blue', label='MLP')
    axs[1].set_ylabel('$x[n]$')
    axs[1].set_xlabel('$n$')
    axs[1].set_xlim(47, t_lorenz[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/mlp-basica/performance/mlp-basica-vs-lorenz-merged.pdf")

    # mackeyglass
    print("Gerando os gráficos para as equações de Mackey-Glass...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    ax.plot(t_mackeyglass, y_mackeyglass_pred, color='tab:blue', label='MLP')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(t_mackeyglass[0], t_mackeyglass[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/mlp-basica/performance/mlp-basica-vs-mackeyglass.pdf")
    fig, ax = plt.subplots(figsize=(12, 8))
    ax.plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    ax.plot(t_mackeyglass, y_mackeyglass_pred, color='tab:blue', label='MLP')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4700, t_mackeyglass[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/mlp-basica/performance/mlp-basica-vs-mackeyglass-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    axs[0].plot(t_mackeyglass, y_mackeyglass_pred, color='tab:blue', label='MLP')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x[n]$')
    axs[0].set_xlabel('$n$')
    axs[0].set_xlim(t_mackeyglass[0], t_mackeyglass[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    axs[1].plot(t_mackeyglass, y_mackeyglass_pred, color='tab:blue', label='MLP')
    axs[1].set_ylabel('$x[n]$')
    axs[1].set_xlabel('$n$')
    axs[1].set_xlim(4700, t_mackeyglass[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/mlp-basica/performance/mlp-basica-vs-mackeyglass-merged.pdf")    
    print("Gráficos gerados!")

# --------------- LSTM --------------- #
elif (int(model) == 2):
    print("Gerando os gráficos para a LSTM")
    print("Extraindo os dados...")
    
    # carrega os dados
    dados_henon = pd.read_csv('data/predictions/lstm/henon.csv')
    dados_logistic = pd.read_csv('data/predictions/lstm/logistic.csv')
    dados_lorenz = pd.read_csv('data/predictions/lstm/lorenz.csv')
    dados_mackeyglass = pd.read_csv('data/predictions/lstm/mackeyglass.csv')

    # henon 
    n_henon = pd.DataFrame(dados_henon, columns=['n']).to_numpy()
    n_henon = n_henon.ravel()
    y_henon_teste = pd.DataFrame(dados_henon, columns=['y_teste']).to_numpy()
    y_henon_teste = y_henon_teste.ravel()
    y_henon_pred = pd.DataFrame(dados_henon, columns=['y_pred']).to_numpy()
    y_henon_pred = y_henon_pred.ravel()

    # logistic    
    n_logistic = pd.DataFrame(dados_logistic, columns=['n']).to_numpy()
    n_logistic = n_logistic.ravel()
    y_logistic_teste = pd.DataFrame(dados_logistic, columns=['y_teste']).to_numpy()
    y_logistic_teste = y_logistic_teste.ravel()
    y_logistic_pred = pd.DataFrame(dados_logistic, columns=['y_pred']).to_numpy()
    y_logistic_pred = y_logistic_pred.ravel()

    # lorenz    
    t_lorenz = pd.DataFrame(dados_lorenz, columns=['t']).to_numpy()
    t_lorenz = t_lorenz.ravel()
    y_lorenz_teste = pd.DataFrame(dados_lorenz, columns=['y_teste']).to_numpy()
    y_lorenz_teste = y_lorenz_teste.ravel()
    y_lorenz_pred = pd.DataFrame(dados_lorenz, columns=['y_pred']).to_numpy()
    y_lorenz_pred = y_lorenz_pred.ravel()    

    # mackeyglass    
    t_mackeyglass = pd.DataFrame(dados_mackeyglass, columns=['t']).to_numpy()
    t_mackeyglass = t_mackeyglass.ravel()
    y_mackeyglass_teste = pd.DataFrame(dados_mackeyglass, columns=['y_teste']).to_numpy()
    y_mackeyglass_teste = y_mackeyglass_teste.ravel()
    y_mackeyglass_pred = pd.DataFrame(dados_mackeyglass, columns=['y_pred']).to_numpy()
    y_mackeyglass_pred = y_mackeyglass_pred.ravel()
    print("Dados extraídos!")

    # gerando os graficos
    # henon
    print("Gerando os gráficos para o mapa de Hénon...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    ax.plot(n_henon, y_henon_pred, color='tab:orange', label='LSTM')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4900, n_henon[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/lstm/performance/lstm-vs-henon.pdf")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    ax.plot(n_henon, y_henon_pred, color='tab:orange', label='LSTM')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4980, n_henon[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/lstm/performance/lstm-vs-henon-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    axs[0].plot(n_henon, y_henon_pred, color='tab:orange', label='LSTM')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x[n]$')
    axs[0].set_xlabel('$n$')
    axs[0].set_xlim(4900, n_henon[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    axs[1].plot(n_henon, y_henon_pred, color='tab:orange', label='LSTM')
    axs[1].set_ylabel('$x[n]$')
    axs[1].set_xlabel('$n$')
    axs[1].set_xlim(4980, n_henon[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/lstm/performance/lstm-vs-henon-merged.pdf")        

    # logistic
    print("Gerando os gráficos para o mapa logístico...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    ax.plot(n_logistic, y_logistic_pred, color='tab:orange', label='LSTM')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4900, n_logistic[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/lstm/performance/lstm-vs-logistic.pdf")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    ax.plot(n_logistic, y_logistic_pred, color='tab:orange', label='LSTM')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4980, n_logistic[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/lstm/performance/lstm-vs-logistic-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    axs[0].plot(n_logistic, y_logistic_pred, color='tab:orange', label='LSTM')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x[n]$')
    axs[0].set_xlabel('$n$')
    axs[0].set_xlim(4900, n_logistic[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    axs[1].plot(n_logistic, y_logistic_pred, color='tab:orange', label='LSTM')
    axs[1].set_ylabel('$x[n]$')
    axs[1].set_xlabel('$n$')
    axs[1].set_xlim(4980, n_logistic[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/lstm/performance/lstm-vs-logistic-merged.pdf")    

    # lorenz
    print("Gerando os gráficos para o sistema de Lorenz...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    ax.plot(t_lorenz, y_lorenz_pred, color='tab:orange', label='LSTM')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(t_lorenz[0], t_lorenz[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/lstm/performance/lstm-vs-lorenz.pdf")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    ax.plot(t_lorenz, y_lorenz_pred, color='tab:orange', label='LSTM')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(47, t_lorenz[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/lstm/performance/lstm-vs-lorenz-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    axs[0].plot(t_lorenz, y_lorenz_pred, color='tab:orange', label='LSTM')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x[n]$')
    axs[0].set_xlabel('$n$')
    axs[0].set_xlim(t_lorenz[0], t_lorenz[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    axs[1].plot(t_lorenz, y_lorenz_pred, color='tab:orange', label='LSTM')
    axs[1].set_ylabel('$x[n]$')
    axs[1].set_xlabel('$n$')
    axs[1].set_xlim(47, t_lorenz[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/lstm/performance/lstm-vs-lorenz-merged.pdf")

    # mackeyglass
    print("Gerando os gráficos para as equações de Mackey-Glass...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    ax.plot(t_mackeyglass, y_mackeyglass_pred, color='tab:orange', label='LSTM')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(t_mackeyglass[0], t_mackeyglass[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/lstm/performance/lstm-vs-mackeyglass.pdf")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    ax.plot(t_mackeyglass, y_mackeyglass_pred, color='tab:orange', label='LSTM')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4700, t_mackeyglass[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/lstm/performance/lstm-vs-mackeyglass-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    axs[0].plot(t_mackeyglass, y_mackeyglass_pred, color='tab:orange', label='LSTM')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x[n]$')
    axs[0].set_xlabel('$n$')
    axs[0].set_xlim(t_mackeyglass[0], t_mackeyglass[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    axs[1].plot(t_mackeyglass, y_mackeyglass_pred, color='tab:orange', label='LSTM')
    axs[1].set_ylabel('$x[n]$')
    axs[1].set_xlabel('$n$')
    axs[1].set_xlim(4700, t_mackeyglass[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/lstm/performance/lstm-vs-mackeyglass-merged.pdf")    
    print("Gráficos gerados!")

# --------------- GRU --------------- #
elif (int(model) == 3):
    print("Gerando os gráficos para a GRU")
    print("Extraindo os dados...")
    
    # carrega os dados
    dados_henon = pd.read_csv('data/predictions/gru/henon.csv')
    dados_logistic = pd.read_csv('data/predictions/gru/logistic.csv')
    dados_lorenz = pd.read_csv('data/predictions/gru/lorenz.csv')
    dados_mackeyglass = pd.read_csv('data/predictions/gru/mackeyglass.csv')

    # henon 
    n_henon = pd.DataFrame(dados_henon, columns=['n']).to_numpy()
    n_henon = n_henon.ravel()
    y_henon_teste = pd.DataFrame(dados_henon, columns=['y_teste']).to_numpy()
    y_henon_teste = y_henon_teste.ravel()
    y_henon_pred = pd.DataFrame(dados_henon, columns=['y_pred']).to_numpy()
    y_henon_pred = y_henon_pred.ravel()

    # logistic    
    n_logistic = pd.DataFrame(dados_logistic, columns=['n']).to_numpy()
    n_logistic = n_logistic.ravel()
    y_logistic_teste = pd.DataFrame(dados_logistic, columns=['y_teste']).to_numpy()
    y_logistic_teste = y_logistic_teste.ravel()
    y_logistic_pred = pd.DataFrame(dados_logistic, columns=['y_pred']).to_numpy()
    y_logistic_pred = y_logistic_pred.ravel()

    # lorenz    
    t_lorenz = pd.DataFrame(dados_lorenz, columns=['t']).to_numpy()
    t_lorenz = t_lorenz.ravel()
    y_lorenz_teste = pd.DataFrame(dados_lorenz, columns=['y_teste']).to_numpy()
    y_lorenz_teste = y_lorenz_teste.ravel()
    y_lorenz_pred = pd.DataFrame(dados_lorenz, columns=['y_pred']).to_numpy()
    y_lorenz_pred = y_lorenz_pred.ravel()    

    # mackeyglass    
    t_mackeyglass = pd.DataFrame(dados_mackeyglass, columns=['t']).to_numpy()
    t_mackeyglass = t_mackeyglass.ravel()
    y_mackeyglass_teste = pd.DataFrame(dados_mackeyglass, columns=['y_teste']).to_numpy()
    y_mackeyglass_teste = y_mackeyglass_teste.ravel()
    y_mackeyglass_pred = pd.DataFrame(dados_mackeyglass, columns=['y_pred']).to_numpy()
    y_mackeyglass_pred = y_mackeyglass_pred.ravel()
    print("Dados extraídos!")

    # gerando os graficos
    # henon
    print("Gerando os gráficos para o mapa de Hénon...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    ax.plot(n_henon, y_henon_pred, color='tab:green', label='GRU')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4900, n_henon[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/gru/performance/gru-vs-henon.pdf")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    ax.plot(n_henon, y_henon_pred, color='tab:green', label='GRU')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4980, n_henon[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/gru/performance/gru-vs-henon-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    axs[0].plot(n_henon, y_henon_pred, color='tab:green', label='GRU')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x[n]$')
    axs[0].set_xlabel('$n$')
    axs[0].set_xlim(4900, n_henon[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    axs[1].plot(n_henon, y_henon_pred, color='tab:green', label='GRU')
    axs[1].set_ylabel('$x[n]$')
    axs[1].set_xlabel('$n$')
    axs[1].set_xlim(4980, n_henon[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/gru/performance/gru-vs-henon-merged.pdf")        

    # logistic
    print("Gerando os gráficos para o mapa logístico...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    ax.plot(n_logistic, y_logistic_pred, color='tab:green', label='GRU')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4900, n_logistic[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/gru/performance/gru-vs-logistic.pdf")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    ax.plot(n_logistic, y_logistic_pred, color='tab:green', label='GRU')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4980, n_logistic[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/gru/performance/gru-vs-logistic-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    axs[0].plot(n_logistic, y_logistic_pred, color='tab:green', label='GRU')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x[n]$')
    axs[0].set_xlabel('$n$')
    axs[0].set_xlim(4900, n_logistic[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    axs[1].plot(n_logistic, y_logistic_pred, color='tab:green', label='GRU')
    axs[1].set_ylabel('$x[n]$')
    axs[1].set_xlabel('$n$')
    axs[1].set_xlim(4980, n_logistic[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/gru/performance/gru-vs-logistic-merged.pdf")    

    # lorenz
    print("Gerando os gráficos para o sistema de Lorenz...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    ax.plot(t_lorenz, y_lorenz_pred, color='tab:green', label='GRU')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(t_lorenz[0], t_lorenz[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/gru/performance/gru-vs-lorenz.pdf")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    ax.plot(t_lorenz, y_lorenz_pred, color='tab:green', label='GRU')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(47, t_lorenz[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/gru/performance/gru-vs-lorenz-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    axs[0].plot(t_lorenz, y_lorenz_pred, color='tab:green', label='GRU')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x[n]$')
    axs[0].set_xlabel('$n$')
    axs[0].set_xlim(t_lorenz[0], t_lorenz[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    axs[1].plot(t_lorenz, y_lorenz_pred, color='tab:green', label='GRU')
    axs[1].set_ylabel('$x[n]$')
    axs[1].set_xlabel('$n$')
    axs[1].set_xlim(47, t_lorenz[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/gru/performance/gru-vs-lorenz-merged.pdf")

    # mackeyglass
    print("Gerando os gráficos para as equações de Mackey-Glass...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    ax.plot(t_mackeyglass, y_mackeyglass_pred, color='tab:green', label='GRU')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(t_mackeyglass[0], t_mackeyglass[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/gru/performance/gru-vs-mackeyglass.pdf")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    ax.plot(t_mackeyglass, y_mackeyglass_pred, color='tab:green', label='GRU')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4700, t_mackeyglass[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/gru/performance/gru-vs-mackeyglass-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    axs[0].plot(t_mackeyglass, y_mackeyglass_pred, color='tab:green', label='GRU')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x[n]$')
    axs[0].set_xlabel('$n$')
    axs[0].set_xlim(t_mackeyglass[0], t_mackeyglass[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    axs[1].plot(t_mackeyglass, y_mackeyglass_pred, color='tab:green', label='GRU')
    axs[1].set_ylabel('$x[n]$')
    axs[1].set_xlabel('$n$')
    axs[1].set_xlim(4700, t_mackeyglass[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/gru/performance/gru-vs-mackeyglass-merged.pdf")    
    print("Gráficos gerados!")    

# --------------- ESN --------------- #
elif (int(model) == 4):
    print("Gerando os gráficos para a ESN")
    print("Extraindo os dados...")
    
    # carrega os dados
    dados_henon = pd.read_csv('data/predictions/esn/henon.csv')
    dados_logistic = pd.read_csv('data/predictions/esn/logistic.csv')
    dados_lorenz = pd.read_csv('data/predictions/esn/lorenz.csv')
    dados_mackeyglass = pd.read_csv('data/predictions/esn/mackeyglass.csv')

    # henon 
    n_henon = pd.DataFrame(dados_henon, columns=['n']).to_numpy()
    n_henon = n_henon.ravel()
    y_henon_teste = pd.DataFrame(dados_henon, columns=['y_teste']).to_numpy()
    y_henon_teste = y_henon_teste.ravel()
    y_henon_pred = pd.DataFrame(dados_henon, columns=['y_pred']).to_numpy()
    y_henon_pred = y_henon_pred.ravel()

    # logistic    
    n_logistic = pd.DataFrame(dados_logistic, columns=['n']).to_numpy()
    n_logistic = n_logistic.ravel()
    y_logistic_teste = pd.DataFrame(dados_logistic, columns=['y_teste']).to_numpy()
    y_logistic_teste = y_logistic_teste.ravel()
    y_logistic_pred = pd.DataFrame(dados_logistic, columns=['y_pred']).to_numpy()
    y_logistic_pred = y_logistic_pred.ravel()

    # lorenz    
    t_lorenz = pd.DataFrame(dados_lorenz, columns=['t']).to_numpy()
    t_lorenz = t_lorenz.ravel()
    y_lorenz_teste = pd.DataFrame(dados_lorenz, columns=['y_teste']).to_numpy()
    y_lorenz_teste = y_lorenz_teste.ravel()
    y_lorenz_pred = pd.DataFrame(dados_lorenz, columns=['y_pred']).to_numpy()
    y_lorenz_pred = y_lorenz_pred.ravel()    

    # mackeyglass    
    t_mackeyglass = pd.DataFrame(dados_mackeyglass, columns=['t']).to_numpy()
    t_mackeyglass = t_mackeyglass.ravel()
    y_mackeyglass_teste = pd.DataFrame(dados_mackeyglass, columns=['y_teste']).to_numpy()
    y_mackeyglass_teste = y_mackeyglass_teste.ravel()
    y_mackeyglass_pred = pd.DataFrame(dados_mackeyglass, columns=['y_pred']).to_numpy()
    y_mackeyglass_pred = y_mackeyglass_pred.ravel()
    print("Dados extraídos!")

    # gerando os graficos
    # henon
    print("Gerando os gráficos para o mapa de Hénon...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    ax.plot(n_henon, y_henon_pred, color='tab:red', label='ESN')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4900, n_henon[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/esn/performance/esn-vs-henon.pdf")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    ax.plot(n_henon, y_henon_pred, color='tab:red', label='ESN')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4980, n_henon[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/esn/performance/esn-vs-henon-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    axs[0].plot(n_henon, y_henon_pred, color='tab:red', label='ESN')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x[n]$')
    axs[0].set_xlabel('$n$')
    axs[0].set_xlim(4900, n_henon[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    axs[1].plot(n_henon, y_henon_pred, color='tab:red', label='ESN')
    axs[1].set_ylabel('$x[n]$')
    axs[1].set_xlabel('$n$')
    axs[1].set_xlim(4980, n_henon[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/esn/performance/esn-vs-henon-merged.pdf")        

    # logistic
    print("Gerando os gráficos para o mapa logístico...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    ax.plot(n_logistic, y_logistic_pred, color='tab:red', label='ESN')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4900, n_logistic[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/esn/performance/esn-vs-logistic.pdf")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    ax.plot(n_logistic, y_logistic_pred, color='tab:red', label='ESN')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4980, n_logistic[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/esn/performance/esn-vs-logistic-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    axs[0].plot(n_logistic, y_logistic_pred, color='tab:red', label='ESN')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x[n]$')
    axs[0].set_xlabel('$n$')
    axs[0].set_xlim(4900, n_logistic[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    axs[1].plot(n_logistic, y_logistic_pred, color='tab:red', label='ESN')
    axs[1].set_ylabel('$x[n]$')
    axs[1].set_xlabel('$n$')
    axs[1].set_xlim(4980, n_logistic[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/esn/performance/esn-vs-logistic-merged.pdf")    

    # lorenz
    print("Gerando os gráficos para o sistema de Lorenz...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    ax.plot(t_lorenz, y_lorenz_pred, color='tab:red', label='ESN')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(t_lorenz[0], t_lorenz[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/esn/performance/esn-vs-lorenz.pdf")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    ax.plot(t_lorenz, y_lorenz_pred, color='tab:red', label='ESN')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(47, t_lorenz[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/esn/performance/esn-vs-lorenz-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    axs[0].plot(t_lorenz, y_lorenz_pred, color='tab:red', label='ESN')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x[n]$')
    axs[0].set_xlabel('$n$')
    axs[0].set_xlim(t_lorenz[0], t_lorenz[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    axs[1].plot(t_lorenz, y_lorenz_pred, color='tab:red', label='ESN')
    axs[1].set_ylabel('$x[n]$')
    axs[1].set_xlabel('$n$')
    axs[1].set_xlim(47, t_lorenz[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/esn/performance/esn-vs-lorenz-merged.pdf")

    # mackeyglass
    print("Gerando os gráficos para as equações de Mackey-Glass...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    ax.plot(t_mackeyglass, y_mackeyglass_pred, color='tab:red', label='ESN')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(t_mackeyglass[0], t_mackeyglass[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/esn/performance/esn-vs-mackeyglass.pdf")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    ax.plot(t_mackeyglass, y_mackeyglass_pred, color='tab:red', label='ESN')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4700, t_mackeyglass[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/esn/performance/esn-vs-mackeyglass-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    axs[0].plot(t_mackeyglass, y_mackeyglass_pred, color='tab:red', label='ESN')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa logístico\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x[n]$')
    axs[0].set_xlabel('$n$')
    axs[0].set_xlim(t_mackeyglass[0], t_mackeyglass[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    axs[1].plot(t_mackeyglass, y_mackeyglass_pred, color='tab:red', label='ESN')
    axs[1].set_ylabel('$x[n]$')
    axs[1].set_xlabel('$n$')
    axs[1].set_xlim(4700, t_mackeyglass[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/esn/performance/esn-vs-mackeyglass-merged.pdf")    
    print("Gráficos gerados!")    

# --------------- COMPARATIVO --------------- #
elif (int(model) == 5):
    print("Gerando os gráficos comparativos")
    print("Extraindo os dados...")

    # carrega os dados da mlp
    dados_mlp_henon = pd.read_csv('data/predictions/mlp-basica/henon.csv')
    dados_mlp_logistic = pd.read_csv('data/predictions/mlp-basica/logistic.csv')
    dados_mlp_lorenz = pd.read_csv('data/predictions/mlp-basica/lorenz.csv')
    dados_mlp_mackeyglass = pd.read_csv('data/predictions/mlp-basica/mackeyglass.csv')

    # carrega os dados da lstm
    dados_lstm_henon = pd.read_csv('data/predictions/lstm/henon.csv')
    dados_lstm_logistic = pd.read_csv('data/predictions/lstm/logistic.csv')
    dados_lstm_lorenz = pd.read_csv('data/predictions/lstm/lorenz.csv')
    dados_lstm_mackeyglass = pd.read_csv('data/predictions/lstm/mackeyglass.csv')

    # carrega os dados da gru
    dados_gru_henon = pd.read_csv('data/predictions/gru/henon.csv')
    dados_gru_logistic = pd.read_csv('data/predictions/gru/logistic.csv')
    dados_gru_lorenz = pd.read_csv('data/predictions/gru/lorenz.csv')
    dados_gru_mackeyglass = pd.read_csv('data/predictions/gru/mackeyglass.csv')
    
    # carrega os dados da esn
    dados_esn_henon = pd.read_csv('data/predictions/esn/henon.csv')
    dados_esn_logistic = pd.read_csv('data/predictions/esn/logistic.csv')
    dados_esn_lorenz = pd.read_csv('data/predictions/esn/lorenz.csv')
    dados_esn_mackeyglass = pd.read_csv('data/predictions/esn/mackeyglass.csv')

    # henon 
    n_henon = pd.DataFrame(dados_mlp_henon, columns=['n']).to_numpy()
    n_henon = n_henon.ravel()[1:]
    y_henon_teste = pd.DataFrame(dados_mlp_henon, columns=['y_teste']).to_numpy()
    y_henon_teste = y_henon_teste.ravel()[1:]
    y_mlp_henon_pred = pd.DataFrame(dados_mlp_henon, columns=['y_pred']).to_numpy()
    y_mlp_henon_pred = y_mlp_henon_pred.ravel()[1:]
    y_lstm_henon_pred = pd.DataFrame(dados_lstm_henon, columns=['y_pred']).to_numpy()
    y_lstm_henon_pred = y_lstm_henon_pred.ravel()
    y_gru_henon_pred = pd.DataFrame(dados_gru_henon, columns=['y_pred']).to_numpy()
    y_gru_henon_pred = y_gru_henon_pred.ravel()
    y_esn_henon_pred = pd.DataFrame(dados_esn_henon, columns=['y_pred']).to_numpy()
    y_esn_henon_pred = y_esn_henon_pred.ravel()[1:]

    # logistic
    n_logistic = pd.DataFrame(dados_mlp_logistic, columns=['n']).to_numpy()
    n_logistic = n_logistic.ravel()[1:]
    y_logistic_teste = pd.DataFrame(dados_mlp_logistic, columns=['y_teste']).to_numpy()
    y_logistic_teste = y_logistic_teste.ravel()[1:]
    y_mlp_logistic_pred = pd.DataFrame(dados_mlp_logistic, columns=['y_pred']).to_numpy()
    y_mlp_logistic_pred = y_mlp_logistic_pred.ravel()[1:]
    y_lstm_logistic_pred = pd.DataFrame(dados_lstm_logistic, columns=['y_pred']).to_numpy()
    y_lstm_logistic_pred = y_lstm_logistic_pred.ravel()
    y_gru_logistic_pred = pd.DataFrame(dados_gru_logistic, columns=['y_pred']).to_numpy()
    y_gru_logistic_pred = y_gru_logistic_pred.ravel()
    y_esn_logistic_pred = pd.DataFrame(dados_esn_logistic, columns=['y_pred']).to_numpy()
    y_esn_logistic_pred = y_esn_logistic_pred.ravel()[1:]

    # lorenz 
    t_lorenz = pd.DataFrame(dados_mlp_lorenz, columns=['t']).to_numpy()
    t_lorenz = t_lorenz.ravel()
    y_lorenz_teste = pd.DataFrame(dados_mlp_lorenz, columns=['y_teste']).to_numpy()
    y_lorenz_teste = y_lorenz_teste.ravel()
    y_mlp_lorenz_pred = pd.DataFrame(dados_mlp_lorenz, columns=['y_pred']).to_numpy()
    y_mlp_lorenz_pred = y_mlp_lorenz_pred.ravel()
    y_lstm_lorenz_pred = pd.DataFrame(dados_lstm_lorenz, columns=['y_pred']).to_numpy()
    y_lstm_lorenz_pred = y_lstm_lorenz_pred.ravel()
    y_gru_lorenz_pred = pd.DataFrame(dados_gru_lorenz, columns=['y_pred']).to_numpy()
    y_gru_lorenz_pred = y_gru_lorenz_pred.ravel()
    y_esn_lorenz_pred = pd.DataFrame(dados_esn_lorenz, columns=['y_pred']).to_numpy()
    y_esn_lorenz_pred = y_esn_lorenz_pred.ravel()[1:]

    # mackeyglass 
    t_mackeyglass = pd.DataFrame(dados_mlp_mackeyglass, columns=['t']).to_numpy()
    t_mackeyglass = t_mackeyglass.ravel()
    y_mackeyglass_teste = pd.DataFrame(dados_mlp_mackeyglass, columns=['y_teste']).to_numpy()
    y_mackeyglass_teste = y_mackeyglass_teste.ravel()
    y_mlp_mackeyglass_pred = pd.DataFrame(dados_mlp_mackeyglass, columns=['y_pred']).to_numpy()
    y_mlp_mackeyglass_pred = y_mlp_mackeyglass_pred.ravel()
    y_lstm_mackeyglass_pred = pd.DataFrame(dados_lstm_mackeyglass, columns=['y_pred']).to_numpy()
    y_lstm_mackeyglass_pred = y_lstm_mackeyglass_pred.ravel()
    y_gru_mackeyglass_pred = pd.DataFrame(dados_gru_mackeyglass, columns=['y_pred']).to_numpy()
    y_gru_mackeyglass_pred = y_gru_mackeyglass_pred.ravel()
    y_esn_mackeyglass_pred = pd.DataFrame(dados_esn_mackeyglass, columns=['y_pred']).to_numpy()
    y_esn_mackeyglass_pred = y_esn_mackeyglass_pred.ravel()[1:]
    print("Dados extraídos!")

    # gerando os graficos
    # henon
    print("Gerando os gráficos para o mapa de Hénon...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    ax.plot(n_henon, y_mlp_henon_pred, label='MLP')
    ax.plot(n_henon, y_lstm_henon_pred, label='LSTM')
    ax.plot(n_henon, y_gru_henon_pred, label='GRU')
    ax.plot(n_henon, y_esn_henon_pred, label='ESN')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4900, n_henon[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/comparativo/vs-henon.pdf")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    ax.plot(n_henon, y_mlp_henon_pred, label='MLP')
    ax.plot(n_henon, y_lstm_henon_pred, label='LSTM')
    ax.plot(n_henon, y_gru_henon_pred, label='GRU')
    ax.plot(n_henon, y_esn_henon_pred, label='ESN')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4980, n_henon[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/comparativo/vs-henon-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    axs[0].plot(n_henon, y_mlp_henon_pred, label='MLP')
    axs[0].plot(n_henon, y_lstm_henon_pred, label='LSTM')
    axs[0].plot(n_henon, y_gru_henon_pred, label='GRU')
    axs[0].plot(n_henon, y_esn_henon_pred, label='ESN')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x[n]$')
    axs[0].set_xlabel('$n$')
    axs[0].set_xlim(4900, n_henon[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(n_henon, y_henon_teste, color='#002d04', label='Valor real')
    axs[1].plot(n_henon, y_mlp_henon_pred, label='MLP')
    axs[1].plot(n_henon, y_lstm_henon_pred, label='LSTM')
    axs[1].plot(n_henon, y_gru_henon_pred, label='GRU')
    axs[1].plot(n_henon, y_esn_henon_pred, label='ESN')
    axs[1].set_ylabel('$x[n]$')
    axs[1].set_xlabel('$n$')
    axs[1].set_xlim(4980, n_henon[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/comparativo/vs-henon-merged.pdf")    

    # logistic
    print("Gerando os gráficos para o mapa logístico...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    ax.plot(n_logistic, y_mlp_logistic_pred, label='MLP')
    ax.plot(n_logistic, y_lstm_logistic_pred, label='LSTM')
    ax.plot(n_logistic, y_gru_logistic_pred, label='GRU')
    ax.plot(n_logistic, y_esn_logistic_pred, label='ESN')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4900, n_logistic[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/comparativo/vs-logistic.pdf")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    ax.plot(n_logistic, y_mlp_logistic_pred, label='MLP')
    ax.plot(n_logistic, y_lstm_logistic_pred, label='LSTM')
    ax.plot(n_logistic, y_gru_logistic_pred, label='GRU')
    ax.plot(n_logistic, y_esn_logistic_pred, label='ESN')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$n$')
    ax.set_xlim(4980, n_logistic[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/comparativo/vs-logistic-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    axs[0].plot(n_logistic, y_mlp_logistic_pred, label='MLP')
    axs[0].plot(n_logistic, y_lstm_logistic_pred, label='LSTM')
    axs[0].plot(n_logistic, y_gru_logistic_pred, label='GRU')
    axs[0].plot(n_logistic, y_esn_logistic_pred, label='ESN')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x[n]$')
    axs[0].set_xlabel('$n$')
    axs[0].set_xlim(4900, n_logistic[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(n_logistic, y_logistic_teste, color='#4b0101', label='Valor real')
    axs[1].plot(n_logistic, y_mlp_logistic_pred, label='MLP')
    axs[1].plot(n_logistic, y_lstm_logistic_pred, label='LSTM')
    axs[1].plot(n_logistic, y_gru_logistic_pred, label='GRU')
    axs[1].plot(n_logistic, y_esn_logistic_pred, label='ESN')
    axs[1].set_ylabel('$x[n]$')
    axs[1].set_xlabel('$n$')
    axs[1].set_xlim(4980, n_logistic[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/comparativo/vs-logistic-merged.pdf")   

    # lorenz
    print("Gerando os gráficos para o sistema de Lorenz...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    ax.plot(t_lorenz, y_mlp_lorenz_pred, label='MLP')
    ax.plot(t_lorenz, y_lstm_lorenz_pred, label='LSTM')
    ax.plot(t_lorenz, y_gru_lorenz_pred, label='GRU')
    ax.plot(t_lorenz, y_esn_lorenz_pred, label='ESN')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x(t)$')
    ax.set_xlabel('$t$')
    ax.set_xlim(t_lorenz[0], t_lorenz[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/comparativo/vs-lorenz.pdf")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    ax.plot(t_lorenz, y_mlp_lorenz_pred, label='MLP')
    ax.plot(t_lorenz, y_lstm_lorenz_pred, label='LSTM')
    ax.plot(t_lorenz, y_gru_lorenz_pred, label='GRU')
    ax.plot(t_lorenz, y_esn_lorenz_pred, label='ESN')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x(t)$')
    ax.set_xlabel('$t$')
    ax.set_xlim(47, t_lorenz[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/comparativo/vs-lorenz-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    axs[0].plot(t_lorenz, y_mlp_lorenz_pred, label='MLP')
    axs[0].plot(t_lorenz, y_lstm_lorenz_pred, label='LSTM')
    axs[0].plot(t_lorenz, y_gru_lorenz_pred, label='GRU')
    axs[0].plot(t_lorenz, y_esn_lorenz_pred, label='ESN')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$x(t)$')
    axs[0].set_xlabel('$t$')
    axs[0].set_xlim(t_lorenz[0], t_lorenz[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(t_lorenz, y_lorenz_teste, color='#35063e', label='Valor real')
    axs[1].plot(t_lorenz, y_mlp_lorenz_pred, label='MLP')
    axs[1].plot(t_lorenz, y_lstm_lorenz_pred, label='LSTM')
    axs[1].plot(t_lorenz, y_gru_lorenz_pred, label='GRU')
    axs[1].plot(t_lorenz, y_esn_lorenz_pred, label='ESN')
    axs[1].set_ylabel('$x(t)$')
    axs[1].set_xlabel('$t$')
    axs[1].set_xlim(47, t_lorenz[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/comparativo/vs-lorenz-merged.pdf")

    # mackeyglass
    print("Gerando os gráficos para as equações de Mackey-Glass...")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    ax.plot(t_mackeyglass, y_mlp_mackeyglass_pred, label='MLP')
    ax.plot(t_mackeyglass, y_lstm_mackeyglass_pred, label='LSTM')
    ax.plot(t_mackeyglass, y_gru_mackeyglass_pred, label='GRU')
    ax.plot(t_mackeyglass, y_esn_mackeyglass_pred, label='ESN')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$x[n]$')
    ax.set_xlabel('$t$')
    ax.set_xlim(t_mackeyglass[0], t_mackeyglass[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/comparativo/vs-mackeyglass.pdf")
    fig, ax = plt.subplots(tight_layout=True)
    ax.plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    ax.plot(t_mackeyglass, y_mlp_mackeyglass_pred, label='MLP')
    ax.plot(t_mackeyglass, y_lstm_mackeyglass_pred, label='LSTM')
    ax.plot(t_mackeyglass, y_gru_mackeyglass_pred, label='GRU')
    ax.plot(t_mackeyglass, y_esn_mackeyglass_pred, label='ESN')
    #ax.set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    ax.set_ylabel('$P(t)$')
    ax.set_xlabel('$t$')
    ax.set_xlim(4700, t_mackeyglass[-1])
    ax.grid(True)
    sns.despine()
    ax.legend()
    fig.savefig("images/comparativo/vs-mackeyglass-zoom.pdf")
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))
    axs[0].plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    axs[0].plot(t_mackeyglass, y_mlp_mackeyglass_pred, label='MLP')
    axs[0].plot(t_mackeyglass, y_lstm_mackeyglass_pred, label='LSTM')
    axs[0].plot(t_mackeyglass, y_gru_mackeyglass_pred, label='GRU')
    axs[0].plot(t_mackeyglass, y_esn_mackeyglass_pred, label='ESN')
    #axs[0].set_title("Comparação da predição da MLP com o valor real do mapa de Hénon\n utilizando as melhores configurações no conjunto de teste")
    axs[0].set_ylabel('$P(t)$')
    axs[0].set_xlabel('$t$')
    axs[0].set_xlim(t_mackeyglass[0], t_mackeyglass[-1])
    axs[0].grid(True)
    sns.despine()
    axs[0].legend()    
    axs[1].plot(t_mackeyglass, y_mackeyglass_teste, color='#653700', label='Valor real')
    axs[1].plot(t_mackeyglass, y_mlp_mackeyglass_pred, label='MLP')
    axs[1].plot(t_mackeyglass, y_lstm_mackeyglass_pred, label='LSTM')
    axs[1].plot(t_mackeyglass, y_gru_mackeyglass_pred, label='GRU')
    axs[1].plot(t_mackeyglass, y_esn_mackeyglass_pred, label='ESN')
    axs[1].set_ylabel('$P(t)$')
    axs[1].set_xlabel('$t$')
    axs[1].set_xlim(4700, t_mackeyglass[-1])
    axs[1].grid(True)
    sns.despine()
    axs[1].legend()
    fig.savefig("images/comparativo/vs-mackeyglass-merged.pdf")
    print("Gráficos gerados!") 