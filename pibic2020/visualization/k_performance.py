# k_performance.py

# bibliotecas gerais
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns 

# config matplotlib
sns.set_style("ticks")
plt.rcParams['savefig.dpi'] = 200
plt.rcParams["figure.dpi"] = 100

plt.rcParams.update({
    "text.usetex": True,
    "font.family": "serif",
    "font.serif": ["Palatino"],
})

print("Gerando os gráficos da progressão do EQM com o valor de K")
# importando os dados
mse_mlp_henon = pd.read_csv('results/mlp-basica/mlp-basica-henon.csv')
mse_mlp_logistic = pd.read_csv('results/mlp-basica/mlp-basica-logistic.csv')
mse_mlp_lorenz = pd.read_csv('results/mlp-basica/mlp-basica-lorenz.csv')
mse_mlp_mackeyglass = pd.read_csv('results/mlp-basica/mlp-basica-mackeyglass.csv')
mse_lstm_henon = pd.read_csv('results/lstm/lstm-henon.csv')
mse_lstm_logistic = pd.read_csv('results/lstm/lstm-logistic.csv')
mse_lstm_lorenz = pd.read_csv('results/lstm/lstm-lorenz.csv')
mse_lstm_mackeyglass = pd.read_csv('results/lstm/lstm-mackeyglass.csv')
mse_gru_henon = pd.read_csv('results/gru/gru-henon.csv')
mse_gru_logistic = pd.read_csv('results/gru/gru-logistic.csv')
mse_gru_lorenz = pd.read_csv('results/gru/gru-lorenz.csv')
mse_gru_mackeyglass = pd.read_csv('results/gru/gru-mackeyglass.csv')
mse_esn_henon = pd.read_csv('results/esn/esn-henon.csv')
mse_esn_logistic = pd.read_csv('results/esn/esn-logistic.csv')
mse_esn_lorenz = pd.read_csv('results/esn/esn-lorenz.csv')
mse_esn_mackeyglass = pd.read_csv('results/esn/esn-mackeyglass.csv')

# gerando os graficos
# mlp
print("Gerando os gráficos para a MLP...")
fig, ax = plt.subplots(nrows=2, ncols=2, tight_layout=True, figsize=(12, 8))
# henon
K = pd.DataFrame(mse_mlp_henon, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_mlp_henon, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_mlp_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[0,0].errorbar(K, MSE, MSE_std, linestyle='None', marker='x', color='DarkGreen', label='MSE')
ax[0,0].set_xlabel('$K$')
ax[0,0].set_ylabel('Erro Quadrático Médio')
ax[0,0].set_title('Mapa de Hénon')
ax[0,0].grid()
# logistico
K = pd.DataFrame(mse_mlp_logistic, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_mlp_logistic, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_mlp_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[0,1].errorbar(K, MSE, MSE_std, linestyle='None', marker='x', color='Crimson', label='MSE')
ax[0,1].set_xlabel('$K$')
ax[0,1].set_ylabel('Erro Quadrático Médio')
ax[0,1].set_title('Mapa logístico')
ax[0,1].grid()
# lorenz
K = pd.DataFrame(mse_mlp_lorenz, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_mlp_lorenz, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_mlp_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[1,0].errorbar(K, MSE, MSE_std, linestyle='None', marker='x', color='DarkBlue', label='MSE')
ax[1,0].set_xlabel('$K$')
ax[1,0].set_ylabel('Erro Quadrático Médio')
ax[1,0].set_title('Sistema de Lorenz')
ax[1,0].grid()
# mackeyglass
K = pd.DataFrame(mse_mlp_mackeyglass, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_mlp_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_mlp_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[1,1].errorbar(K, MSE, MSE_std, linestyle='None', marker='x', color='DarkOrange', label='MSE')
ax[1,1].set_xlabel('$K$')
ax[1,1].set_ylabel('Erro Quadrático Médio')
ax[1,1].set_title('Equações de Mackey-Glass')
ax[1,1].grid()
fig.suptitle("Progressão do EQM com o valor de $K$ para a MLP nos cenários avaliados")
sns.despine()
fig.savefig("images/results/mlp-mse.pdf")

print("Gerando os gráficos para a LSTM...")
# lstm
fig, ax = plt.subplots(nrows=2, ncols=2, tight_layout=True, figsize=(12, 8))
# henon
K = pd.DataFrame(mse_lstm_henon, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_lstm_henon, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_lstm_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[0,0].errorbar(K, MSE, MSE_std, linestyle='None', marker='d', color='DarkGreen', label='MSE')
ax[0,0].set_xlabel('$K$')
ax[0,0].set_ylabel('Erro Quadrático Médio')
ax[0,0].set_title('Mapa de Hénon')
ax[0,0].grid()
# logistico
K = pd.DataFrame(mse_lstm_logistic, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_lstm_logistic, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_lstm_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[0,1].errorbar(K, MSE, MSE_std, linestyle='None', marker='d', color='Crimson', label='MSE')
ax[0,1].set_xlabel('$K$')
ax[0,1].set_ylabel('Erro Quadrático Médio')
ax[0,1].set_title('Mapa logístico')
ax[0,1].grid()
# lorenz
K = pd.DataFrame(mse_lstm_lorenz, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_lstm_lorenz, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_lstm_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[1,0].errorbar(K, MSE, MSE_std, linestyle='None', marker='d', color='DarkBlue', label='MSE')
ax[1,0].set_xlabel('$K$')
ax[1,0].set_ylabel('Erro Quadrático Médio')
ax[1,0].set_title('Sistema de Lorenz')
ax[1,0].grid()
# mackeyglass
K = pd.DataFrame(mse_lstm_mackeyglass, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_lstm_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_lstm_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[1,1].errorbar(K, MSE, MSE_std, linestyle='None', marker='d', color='DarkOrange', label='MSE')
ax[1,1].set_xlabel('$K$')
ax[1,1].set_ylabel('Erro Quadrático Médio')
ax[1,1].set_title('Equações de Mackey-Glass')
ax[1,1].grid()
fig.suptitle("Progressão do EQM com o valor de $K$ para a LSTM nos cenários avaliados")
sns.despine()
fig.savefig("images/results/lstm-mse.pdf")

print("Gerando os gráficos para a GRU...")
# gru 
fig, ax = plt.subplots(nrows=2, ncols=2, tight_layout=True, figsize=(12, 8))
# henon
K = pd.DataFrame(mse_gru_henon, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_gru_henon, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_gru_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[0,0].errorbar(K, MSE, MSE_std, linestyle='None', marker='H', color='DarkGreen', label='MSE')
ax[0,0].set_xlabel('$K$')
ax[0,0].set_ylabel('Erro Quadrático Médio')
ax[0,0].set_title('Mapa de Hénon')
ax[0,0].grid()
# logistico
K = pd.DataFrame(mse_gru_logistic, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_gru_logistic, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_gru_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[0,1].errorbar(K, MSE, MSE_std, linestyle='None', marker='H', color='Crimson', label='MSE')
ax[0,1].set_xlabel('$K$')
ax[0,1].set_ylabel('Erro Quadrático Médio')
ax[0,1].set_title('Mapa logístico')
ax[0,1].grid()
# lorenz
K = pd.DataFrame(mse_gru_lorenz, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_gru_lorenz, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_gru_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[1,0].errorbar(K, MSE, MSE_std, linestyle='None', marker='H', color='DarkBlue', label='MSE')
ax[1,0].set_xlabel('$K$')
ax[1,0].set_ylabel('Erro Quadrático Médio')
ax[1,0].set_title('Sistema de Lorenz')
ax[1,0].grid()
# mackeyglass
K = pd.DataFrame(mse_gru_mackeyglass, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_gru_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_gru_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[1,1].errorbar(K, MSE, MSE_std, linestyle='None', marker='H', color='DarkOrange', label='MSE')
ax[1,1].set_xlabel('$K$')
ax[1,1].set_ylabel('Erro Quadrático Médio')
ax[1,1].set_title('Equações de Mackey-Glass')
ax[1,1].grid()
fig.suptitle("Progressão do EQM com o valor de $K$ para a GRU nos cenários avaliados")
sns.despine()
fig.savefig("images/results/gru-mse.pdf")

# esn
print("Gerando os gráficos para a ESN...")
fig, ax = plt.subplots(nrows=2, ncols=2, tight_layout=True, figsize=(12, 8))
# henon
K = pd.DataFrame(mse_esn_henon, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_esn_henon, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_esn_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[0,0].errorbar(K, MSE, MSE_std, linestyle='None', marker='*', color='DarkGreen', label='MSE')
ax[0,0].set_xlabel('$K$')
ax[0,0].set_ylabel('Erro Quadrático Médio')
ax[0,0].set_title('Mapa de Hénon')
ax[0,0].grid()
# logistico
K = pd.DataFrame(mse_esn_logistic, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_esn_logistic, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_esn_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[0,1].errorbar(K, MSE, MSE_std, linestyle='None', marker='*', color='Crimson', label='MSE')
ax[0,1].set_xlabel('$K$')
ax[0,1].set_ylabel('Erro Quadrático Médio')
ax[0,1].set_title('Mapa logístico')
ax[0,1].grid()
# lorenz
K = pd.DataFrame(mse_esn_lorenz, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_esn_lorenz, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_esn_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[1,0].errorbar(K, MSE, MSE_std, linestyle='None', marker='*', color='DarkBlue', label='MSE')
ax[1,0].set_xlabel('$K$')
ax[1,0].set_ylabel('Erro Quadrático Médio')
ax[1,0].set_title('Sistema de Lorenz')
ax[1,0].grid()
# mackeyglass
K = pd.DataFrame(mse_esn_mackeyglass, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_esn_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_esn_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[1,1].errorbar(K, MSE, MSE_std, linestyle='None', marker='*', color='DarkOrange', label='MSE')
ax[1,1].set_xlabel('$K$')
ax[1,1].set_ylabel('Erro Quadrático Médio')
ax[1,1].set_title('Equações de Mackey-Glass')
ax[1,1].grid()
#fig.suptitle("Progressão do EQM com o valor de $K$ para a ESN nos cenários avaliados")
sns.despine()
fig.savefig("images/results/esn-mse.pdf")

# comparacao entre modelos
print("Gerando as comparações entre os modelos...")
# henon
fig, ax = plt.subplots(tight_layout=True)
K = pd.DataFrame(mse_mlp_henon, columns=['K']).to_numpy()
K = K.ravel()
MSE_mlp = pd.DataFrame(mse_mlp_henon, columns=['Media do MSE']).to_numpy()
MSE_mlp = MSE_mlp.ravel()
MSE_std_mlp = pd.DataFrame(mse_mlp_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_mlp = MSE_std_mlp.ravel()
MSE_lstm = pd.DataFrame(mse_lstm_henon, columns=['Media do MSE']).to_numpy()
MSE_lstm = MSE_lstm.ravel()
MSE_std_lstm = pd.DataFrame(mse_lstm_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_lstm = MSE_std_lstm.ravel()
MSE_gru = pd.DataFrame(mse_gru_henon, columns=['Media do MSE']).to_numpy()
MSE_gru = MSE_gru.ravel()
MSE_std_gru = pd.DataFrame(mse_gru_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_gru = MSE_std_gru.ravel()
MSE_esn = pd.DataFrame(mse_esn_henon, columns=['Media do MSE']).to_numpy()
MSE_esn = MSE_esn.ravel()
MSE_std_esn = pd.DataFrame(mse_esn_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_esn = MSE_std_esn.ravel()
ax.errorbar(K, MSE_mlp, MSE_std_mlp, linestyle='None', marker='x', label='MLP')
ax.errorbar(K, MSE_lstm, MSE_std_lstm, linestyle='None', marker='d', label='LSTM')
ax.errorbar(K, MSE_gru, MSE_std_gru, linestyle='None', marker='H', label='GRU')
ax.errorbar(K, MSE_esn, MSE_std_esn, linestyle='None', marker='*', label='ESN')
ax.legend()
ax.set_xlabel('$K$')
ax.set_ylabel('Erro Quadrático Médio')
#ax.set_title('Desempenho no mapa de Hénon para as redes analisadas')
sns.despine()
ax.grid()
fig.savefig("images/results/henon.pdf")
fig.savefig("reports/congresso-pibic/figures/progressao-k-henon.pdf")

# logistic
fig, ax = plt.subplots(tight_layout=True)
K = pd.DataFrame(mse_mlp_logistic, columns=['K']).to_numpy()
K = K.ravel()
MSE_mlp = pd.DataFrame(mse_mlp_logistic, columns=['Media do MSE']).to_numpy()
MSE_mlp = MSE_mlp.ravel()
MSE_std_mlp = pd.DataFrame(mse_mlp_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_mlp = MSE_std_mlp.ravel()
MSE_lstm = pd.DataFrame(mse_lstm_logistic, columns=['Media do MSE']).to_numpy()
MSE_lstm = MSE_lstm.ravel()
MSE_std_lstm = pd.DataFrame(mse_lstm_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_lstm = MSE_std_lstm.ravel()
MSE_gru = pd.DataFrame(mse_gru_logistic, columns=['Media do MSE']).to_numpy()
MSE_gru = MSE_gru.ravel()
MSE_std_gru = pd.DataFrame(mse_gru_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_gru = MSE_std_gru.ravel()
MSE_esn = pd.DataFrame(mse_esn_logistic, columns=['Media do MSE']).to_numpy()
MSE_esn = MSE_esn.ravel()
MSE_std_esn = pd.DataFrame(mse_esn_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_esn = MSE_std_esn.ravel()
ax.errorbar(K, MSE_mlp, MSE_std_mlp, linestyle='None', marker='x', label='MLP')
ax.errorbar(K, MSE_lstm, MSE_std_lstm, linestyle='None', marker='d', label='LSTM')
ax.errorbar(K, MSE_gru, MSE_std_gru, linestyle='None', marker='H', label='GRU')
ax.errorbar(K, MSE_esn, MSE_std_esn, linestyle='None', marker='*', label='ESN')
ax.legend()
ax.set_xlabel('$K$')
ax.set_ylabel('Erro Quadrático Médio')
#ax.set_title('Desempenho no mapa logístico para as redes analisadas')
sns.despine()
ax.grid()
fig.savefig("images/results/logistic.pdf")
fig.savefig("reports/congresso-pibic/figures/progressao-k-logistic.pdf")

# sistema de lorenz
fig, ax = plt.subplots(tight_layout=True)
K = pd.DataFrame(mse_mlp_lorenz, columns=['K']).to_numpy()
K = K.ravel()
MSE_mlp = pd.DataFrame(mse_mlp_lorenz, columns=['Media do MSE']).to_numpy()
MSE_mlp = MSE_mlp.ravel()
MSE_std_mlp = pd.DataFrame(mse_mlp_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_mlp = MSE_std_mlp.ravel()
MSE_lstm = pd.DataFrame(mse_lstm_lorenz, columns=['Media do MSE']).to_numpy()
MSE_lstm = MSE_lstm.ravel()
MSE_std_lstm = pd.DataFrame(mse_lstm_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_lstm = MSE_std_lstm.ravel()
MSE_gru = pd.DataFrame(mse_gru_lorenz, columns=['Media do MSE']).to_numpy()
MSE_gru = MSE_gru.ravel()
MSE_std_gru = pd.DataFrame(mse_gru_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_gru = MSE_std_gru.ravel()
MSE_esn = pd.DataFrame(mse_esn_lorenz, columns=['Media do MSE']).to_numpy()
MSE_esn = MSE_esn.ravel()
MSE_std_esn = pd.DataFrame(mse_esn_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_esn = MSE_std_esn.ravel()
ax.errorbar(K, MSE_mlp, MSE_std_mlp, linestyle='None', marker='x', label='MLP')
ax.errorbar(K, MSE_lstm, MSE_std_lstm, linestyle='None', marker='d', label='LSTM')
ax.errorbar(K, MSE_gru, MSE_std_gru, linestyle='None', marker='H', label='GRU')
ax.errorbar(K, MSE_esn, MSE_std_esn, linestyle='None', marker='*', label='ESN')
ax.legend()
ax.set_xlabel('$K$')
ax.set_ylabel('Erro Quadrático Médio')
#ax.set_title('Desempenho no sistema de Lorenz para as redes analisadas')
sns.despine()
ax.grid()
fig.savefig("images/results/lorenz.pdf")
fig.savefig("reports/congresso-pibic/figures/progressao-k-lorenz.pdf")

# mackey-glass
fig, ax = plt.subplots(tight_layout=True)
K = pd.DataFrame(mse_mlp_mackeyglass, columns=['K']).to_numpy()
K = K.ravel()
MSE_mlp = pd.DataFrame(mse_mlp_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE_mlp = MSE_mlp.ravel()
MSE_std_mlp = pd.DataFrame(mse_mlp_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_mlp = MSE_std_mlp.ravel()
MSE_lstm = pd.DataFrame(mse_lstm_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE_lstm = MSE_lstm.ravel()
MSE_std_lstm = pd.DataFrame(mse_lstm_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_lstm = MSE_std_lstm.ravel()
MSE_gru = pd.DataFrame(mse_gru_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE_gru = MSE_gru.ravel()
MSE_std_gru = pd.DataFrame(mse_gru_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_gru = MSE_std_gru.ravel()
MSE_esn = pd.DataFrame(mse_esn_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE_esn = MSE_esn.ravel()
MSE_std_esn = pd.DataFrame(mse_esn_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_esn = MSE_std_esn.ravel()
ax.errorbar(K, MSE_mlp, MSE_std_mlp, linestyle='None', marker='x', label='MLP')
ax.errorbar(K, MSE_lstm, MSE_std_lstm, linestyle='None', marker='d', label='LSTM')
ax.errorbar(K, MSE_gru, MSE_std_gru, linestyle='None', marker='H', label='GRU')
ax.errorbar(K, MSE_esn, MSE_std_esn, linestyle='None', marker='*', label='ESN')
ax.legend()
ax.set_xlabel('$K$')
ax.set_ylabel('Erro Quadrático Médio')
#ax.set_title('Desempenho nas equações de Mackey-Glass para as redes analisadas')
sns.despine()
ax.grid()
fig.savefig("images/results/mackeyglass.pdf")
fig.savefig("reports/congresso-pibic/figures/progressao-k-mackeyglass.pdf")
print("Gráficos gerados!")
print("")

# agora, geraremos os graficos para os tres melhores K's
print("Gerando os gráficos para os três melhores valores de K")
# importando os dados
mse_mlp_henon = pd.read_csv('results/mlp-basica/mlp-basica-henon-3best.csv')
mse_mlp_logistic = pd.read_csv('results/mlp-basica/mlp-basica-logistic-3best.csv')
mse_mlp_lorenz = pd.read_csv('results/mlp-basica/mlp-basica-lorenz-3best.csv')
mse_mlp_mackeyglass = pd.read_csv('results/mlp-basica/mlp-basica-mackeyglass-3best.csv')
mse_lstm_henon = pd.read_csv('results/lstm/lstm-henon-3best.csv')
mse_lstm_logistic = pd.read_csv('results/lstm/lstm-logistic-3best.csv')
mse_lstm_lorenz = pd.read_csv('results/lstm/lstm-lorenz-3best.csv')
mse_lstm_mackeyglass = pd.read_csv('results/lstm/lstm-mackeyglass-3best.csv')
mse_gru_henon = pd.read_csv('results/gru/gru-henon-3best.csv')
mse_gru_logistic = pd.read_csv('results/gru/gru-logistic-3best.csv')
mse_gru_lorenz = pd.read_csv('results/gru/gru-lorenz-3best.csv')
mse_gru_mackeyglass = pd.read_csv('results/gru/gru-mackeyglass-3best.csv')
mse_esn_henon = pd.read_csv('results/esn/esn-henon-3best.csv')
mse_esn_logistic = pd.read_csv('results/esn/esn-logistic-3best.csv')
mse_esn_lorenz = pd.read_csv('results/esn/esn-lorenz-3best.csv')
mse_esn_mackeyglass = pd.read_csv('results/esn/esn-mackeyglass-3best.csv')

# gerando os graficos
# mlp
print("Gerando os gráficos para a MLP...")
fig, ax = plt.subplots(nrows=2, ncols=2, tight_layout=True, figsize=(12, 8))
# henon
K = pd.DataFrame(mse_mlp_henon, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_mlp_henon, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_mlp_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[0,0].errorbar(K, MSE, MSE_std, linestyle='None', marker='x', color='DarkGreen', label='MSE')
ax[0,0].set_xlabel('$K$')
ax[0,0].set_ylabel('Erro Quadrático Médio')
ax[0,0].set_title('Mapa de Hénon')
ax[0,0].grid()
# logistico
K = pd.DataFrame(mse_mlp_logistic, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_mlp_logistic, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_mlp_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[0,1].errorbar(K, MSE, MSE_std, linestyle='None', marker='x', color='Crimson', label='MSE')
ax[0,1].set_xlabel('$K$')
ax[0,1].set_ylabel('Erro Quadrático Médio')
ax[0,1].set_title('Mapa logístico')
ax[0,1].grid()
# lorenz
K = pd.DataFrame(mse_mlp_lorenz, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_mlp_lorenz, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_mlp_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[1,0].errorbar(K, MSE, MSE_std, linestyle='None', marker='x', color='DarkBlue', label='MSE')
ax[1,0].set_xlabel('$K$')
ax[1,0].set_ylabel('Erro Quadrático Médio')
ax[1,0].set_title('Sistema de Lorenz')
ax[1,0].grid()
# mackeyglass
K = pd.DataFrame(mse_mlp_mackeyglass, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_mlp_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_mlp_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[1,1].errorbar(K, MSE, MSE_std, linestyle='None', marker='x', color='DarkOrange', label='MSE')
ax[1,1].set_xlabel('$K$')
ax[1,1].set_ylabel('Erro Quadrático Médio')
ax[1,1].set_title('Equações de Mackey-Glass')
ax[1,1].grid()
fig.suptitle("EQM para os três melhores valores de $K$ para a MLP nos cenários avaliados")
sns.despine()
fig.savefig("images/results/mlp-mse-3best.pdf")

print("Gerando os gráficos para a LSTM...")
# lstm
fig, ax = plt.subplots(nrows=2, ncols=2, tight_layout=True, figsize=(12, 8))
# henon
K = pd.DataFrame(mse_lstm_henon, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_lstm_henon, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_lstm_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[0,0].errorbar(K, MSE, MSE_std, linestyle='None', marker='d', color='DarkGreen', label='MSE')
ax[0,0].set_xlabel('$K$')
ax[0,0].set_ylabel('Erro Quadrático Médio')
ax[0,0].set_title('Mapa de Hénon')
ax[0,0].grid()
# logistico
K = pd.DataFrame(mse_lstm_logistic, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_lstm_logistic, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_lstm_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[0,1].errorbar(K, MSE, MSE_std, linestyle='None', marker='d', color='Crimson', label='MSE')
ax[0,1].set_xlabel('$K$')
ax[0,1].set_ylabel('Erro Quadrático Médio')
ax[0,1].set_title('Mapa logístico')
ax[0,1].grid()
# lorenz
K = pd.DataFrame(mse_lstm_lorenz, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_lstm_lorenz, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_lstm_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[1,0].errorbar(K, MSE, MSE_std, linestyle='None', marker='d', color='DarkBlue', label='MSE')
ax[1,0].set_xlabel('$K$')
ax[1,0].set_ylabel('Erro Quadrático Médio')
ax[1,0].set_title('Sistema de Lorenz')
ax[1,0].grid()
# mackeyglass
K = pd.DataFrame(mse_lstm_mackeyglass, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_lstm_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_lstm_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[1,1].errorbar(K, MSE, MSE_std, linestyle='None', marker='d', color='DarkOrange', label='MSE')
ax[1,1].set_xlabel('$K$')
ax[1,1].set_ylabel('Erro Quadrático Médio')
ax[1,1].set_title('Equações de Mackey-Glass')
ax[1,1].grid()
fig.suptitle("EQM para os três melhores valores de $K$ para a LSTM nos cenários avaliados")
sns.despine()
fig.savefig("images/results/lstm-mse-3best.pdf")

print("Gerando os gráficos para a GRU...")
# gru 
fig, ax = plt.subplots(nrows=2, ncols=2, tight_layout=True, figsize=(12, 8))
# henon
K = pd.DataFrame(mse_gru_henon, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_gru_henon, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_gru_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[0,0].errorbar(K, MSE, MSE_std, linestyle='None', marker='H', color='DarkGreen', label='MSE')
ax[0,0].set_xlabel('$K$')
ax[0,0].set_ylabel('Erro Quadrático Médio')
ax[0,0].set_title('Mapa de Hénon')
ax[0,0].grid()
# logistico
K = pd.DataFrame(mse_gru_logistic, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_gru_logistic, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_gru_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[0,1].errorbar(K, MSE, MSE_std, linestyle='None', marker='H', color='Crimson', label='MSE')
ax[0,1].set_xlabel('$K$')
ax[0,1].set_ylabel('Erro Quadrático Médio')
ax[0,1].set_title('Mapa logístico')
ax[0,1].grid()
# lorenz
K = pd.DataFrame(mse_gru_lorenz, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_gru_lorenz, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_gru_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[1,0].errorbar(K, MSE, MSE_std, linestyle='None', marker='H', color='DarkBlue', label='MSE')
ax[1,0].set_xlabel('$K$')
ax[1,0].set_ylabel('Erro Quadrático Médio')
ax[1,0].set_title('Sistema de Lorenz')
ax[1,0].grid()
# mackeyglass
K = pd.DataFrame(mse_gru_mackeyglass, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_gru_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_gru_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[1,1].errorbar(K, MSE, MSE_std, linestyle='None', marker='H', color='DarkOrange', label='MSE')
ax[1,1].set_xlabel('$K$')
ax[1,1].set_ylabel('Erro Quadrático Médio')
ax[1,1].set_title('Equações de Mackey-Glass')
ax[1,1].grid()
fig.suptitle("EQM para os três melhores valores de $K$ para a GRU nos cenários avaliados")
sns.despine()
fig.savefig("images/results/gru-mse-3best.pdf")

# esn
print("Gerando os gráficos para a ESN...")
fig, ax = plt.subplots(nrows=2, ncols=2, tight_layout=True, figsize=(12, 8))
# henon
K = pd.DataFrame(mse_esn_henon, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_esn_henon, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_esn_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[0,0].errorbar(K, MSE, MSE_std, linestyle='None', marker='*', color='DarkGreen', label='MSE')
ax[0,0].set_xlabel('$K$')
ax[0,0].set_ylabel('Erro Quadrático Médio')
ax[0,0].set_title('Mapa de Hénon')
ax[0,0].grid()
# logistico
K = pd.DataFrame(mse_esn_logistic, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_esn_logistic, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_esn_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[0,1].errorbar(K, MSE, MSE_std, linestyle='None', marker='*', color='Crimson', label='MSE')
ax[0,1].set_xlabel('$K$')
ax[0,1].set_ylabel('Erro Quadrático Médio')
ax[0,1].set_title('Mapa logístico')
ax[0,1].grid()
# lorenz
K = pd.DataFrame(mse_esn_lorenz, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_esn_lorenz, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_esn_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[1,0].errorbar(K, MSE, MSE_std, linestyle='None', marker='*', color='DarkBlue', label='MSE')
ax[1,0].set_xlabel('$K$')
ax[1,0].set_ylabel('Erro Quadrático Médio')
ax[1,0].set_title('Sistema de Lorenz')
ax[1,0].grid()
# mackeyglass
K = pd.DataFrame(mse_esn_mackeyglass, columns=['K']).to_numpy()
K = K.ravel()
MSE = pd.DataFrame(mse_esn_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE = MSE.ravel()
MSE_std = pd.DataFrame(mse_esn_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std = MSE_std.ravel()
ax[1,1].errorbar(K, MSE, MSE_std, linestyle='None', marker='*', color='DarkOrange', label='MSE')
ax[1,1].set_xlabel('$K$')
ax[1,1].set_ylabel('Erro Quadrático Médio')
ax[1,1].set_title('Equações de Mackey-Glass')
ax[1,1].grid()
fig.suptitle("EQM para os três melhores valores de $K$ para a ESN nos cenários avaliados")
sns.despine()
fig.savefig("images/results/esn-mse-3best.pdf")

# comparacao entre modelos
print("Gerando as comparações entre os modelos...")
# henon
fig, ax = plt.subplots(tight_layout=True)
K_mlp = pd.DataFrame(mse_mlp_henon, columns=['K']).to_numpy()
K_mlp = K_mlp.ravel()
K_lstm = pd.DataFrame(mse_lstm_henon, columns=['K']).to_numpy()
K_lstm = K_lstm.ravel()
K_gru = pd.DataFrame(mse_gru_henon, columns=['K']).to_numpy()
K_gru = K_gru.ravel()
K_esn = pd.DataFrame(mse_esn_henon, columns=['K']).to_numpy()
K_esn = K_esn.ravel()
MSE_mlp = pd.DataFrame(mse_mlp_henon, columns=['Media do MSE']).to_numpy()
MSE_mlp = MSE_mlp.ravel()
MSE_std_mlp = pd.DataFrame(mse_mlp_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_mlp = MSE_std_mlp.ravel()
MSE_lstm = pd.DataFrame(mse_lstm_henon, columns=['Media do MSE']).to_numpy()
MSE_lstm = MSE_lstm.ravel()
MSE_std_lstm = pd.DataFrame(mse_lstm_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_lstm = MSE_std_lstm.ravel()
MSE_gru = pd.DataFrame(mse_gru_henon, columns=['Media do MSE']).to_numpy()
MSE_gru = MSE_gru.ravel()
MSE_std_gru = pd.DataFrame(mse_gru_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_gru = MSE_std_gru.ravel()
MSE_esn = pd.DataFrame(mse_esn_henon, columns=['Media do MSE']).to_numpy()
MSE_esn = MSE_esn.ravel()
MSE_std_esn = pd.DataFrame(mse_esn_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_esn = MSE_std_esn.ravel()
ax.errorbar(K_mlp, MSE_mlp, MSE_std_mlp, linestyle='None', marker='x', label='MLP')
ax.errorbar(K_lstm, MSE_lstm, MSE_std_lstm, linestyle='None', marker='d', label='LSTM')
ax.errorbar(K_gru, MSE_gru, MSE_std_gru, linestyle='None', marker='H', label='GRU')
ax.errorbar(K_esn, MSE_esn, MSE_std_esn, linestyle='None', marker='*', label='ESN')
ax.legend()
ax.set_xlabel('$K$')
ax.set_ylabel('Erro Quadrático Médio')
#ax.set_title('Desempenho no mapa de Hénon para as redes analisadas\n com os três melhores valores de $K$')
sns.despine()
ax.grid()
fig.savefig("images/results/henon-3best.pdf")

# logistic
fig, ax = plt.subplots(tight_layout=True)
K_mlp = pd.DataFrame(mse_mlp_logistic, columns=['K']).to_numpy()
K_mlp = K_mlp.ravel()
K_lstm = pd.DataFrame(mse_lstm_logistic, columns=['K']).to_numpy()
K_lstm = K_lstm.ravel()
K_gru = pd.DataFrame(mse_gru_logistic, columns=['K']).to_numpy()
K_gru = K_gru.ravel()
K_esn = pd.DataFrame(mse_esn_logistic, columns=['K']).to_numpy()
K_esn = K_esn.ravel()
MSE_mlp = pd.DataFrame(mse_mlp_logistic, columns=['Media do MSE']).to_numpy()
MSE_mlp = MSE_mlp.ravel()
MSE_std_mlp = pd.DataFrame(mse_mlp_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_mlp = MSE_std_mlp.ravel()
MSE_lstm = pd.DataFrame(mse_lstm_logistic, columns=['Media do MSE']).to_numpy()
MSE_lstm = MSE_lstm.ravel()
MSE_std_lstm = pd.DataFrame(mse_lstm_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_lstm = MSE_std_lstm.ravel()
MSE_gru = pd.DataFrame(mse_gru_logistic, columns=['Media do MSE']).to_numpy()
MSE_gru = MSE_gru.ravel()
MSE_std_gru = pd.DataFrame(mse_gru_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_gru = MSE_std_gru.ravel()
MSE_esn = pd.DataFrame(mse_esn_logistic, columns=['Media do MSE']).to_numpy()
MSE_esn = MSE_esn.ravel()
MSE_std_esn = pd.DataFrame(mse_esn_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_esn = MSE_std_esn.ravel()
ax.errorbar(K_mlp, MSE_mlp, MSE_std_mlp, linestyle='None', marker='x', label='MLP')
ax.errorbar(K_lstm, MSE_lstm, MSE_std_lstm, linestyle='None', marker='d', label='LSTM')
ax.errorbar(K_gru, MSE_gru, MSE_std_gru, linestyle='None', marker='H', label='GRU')
ax.errorbar(K_esn, MSE_esn, MSE_std_esn, linestyle='None', marker='*', label='ESN')
ax.legend()
ax.set_xlabel('$K$')
ax.set_ylabel('Erro Quadrático Médio')
#ax.set_title('Desempenho no mapa logístico para as redes analisadas\n com os três melhores valores de $K$')
sns.despine()
ax.grid()
fig.savefig("images/results/logistic-3best.pdf")

# sistema de lorenz
fig, ax = plt.subplots(tight_layout=True)
K_mlp = pd.DataFrame(mse_mlp_lorenz, columns=['K']).to_numpy()
K_mlp = K_mlp.ravel()
K_lstm = pd.DataFrame(mse_lstm_lorenz, columns=['K']).to_numpy()
K_lstm = K_lstm.ravel()
K_gru = pd.DataFrame(mse_gru_lorenz, columns=['K']).to_numpy()
K_gru = K_gru.ravel()
K_esn = pd.DataFrame(mse_esn_lorenz, columns=['K']).to_numpy()
K_esn = K_esn.ravel()
MSE_mlp = pd.DataFrame(mse_mlp_lorenz, columns=['Media do MSE']).to_numpy()
MSE_mlp = MSE_mlp.ravel()
MSE_std_mlp = pd.DataFrame(mse_mlp_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_mlp = MSE_std_mlp.ravel()
MSE_lstm = pd.DataFrame(mse_lstm_lorenz, columns=['Media do MSE']).to_numpy()
MSE_lstm = MSE_lstm.ravel()
MSE_std_lstm = pd.DataFrame(mse_lstm_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_lstm = MSE_std_lstm.ravel()
MSE_gru = pd.DataFrame(mse_gru_lorenz, columns=['Media do MSE']).to_numpy()
MSE_gru = MSE_gru.ravel()
MSE_std_gru = pd.DataFrame(mse_gru_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_gru = MSE_std_gru.ravel()
MSE_esn = pd.DataFrame(mse_esn_lorenz, columns=['Media do MSE']).to_numpy()
MSE_esn = MSE_esn.ravel()
MSE_std_esn = pd.DataFrame(mse_esn_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_esn = MSE_std_esn.ravel()
ax.errorbar(K_mlp, MSE_mlp, MSE_std_mlp, linestyle='None', marker='x', label='MLP')
ax.errorbar(K_lstm, MSE_lstm, MSE_std_lstm, linestyle='None', marker='d', label='LSTM')
ax.errorbar(K_gru, MSE_gru, MSE_std_gru, linestyle='None', marker='H', label='GRU')
ax.errorbar(K_esn, MSE_esn, MSE_std_esn, linestyle='None', marker='*', label='ESN')
ax.legend()
ax.set_xlabel('$K$')
ax.set_ylabel('Erro Quadrático Médio')
#ax.set_title('Desempenho no sistema de Lorenz para as redes analisadas\n com os três melhores valores de $K$')
sns.despine()
ax.grid()
fig.savefig("images/results/lorenz-3best.pdf")

# mackey-glass
fig, ax = plt.subplots(tight_layout=True)
K_mlp = pd.DataFrame(mse_mlp_mackeyglass, columns=['K']).to_numpy()
K_mlp = K_mlp.ravel()
K_lstm = pd.DataFrame(mse_lstm_mackeyglass, columns=['K']).to_numpy()
K_lstm = K_lstm.ravel()
K_gru = pd.DataFrame(mse_gru_mackeyglass, columns=['K']).to_numpy()
K_gru = K_gru.ravel()
K_esn = pd.DataFrame(mse_esn_mackeyglass, columns=['K']).to_numpy()
K_esn = K_esn.ravel()
MSE_mlp = pd.DataFrame(mse_mlp_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE_mlp = MSE_mlp.ravel()
MSE_std_mlp = pd.DataFrame(mse_mlp_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_mlp = MSE_std_mlp.ravel()
MSE_lstm = pd.DataFrame(mse_lstm_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE_lstm = MSE_lstm.ravel()
MSE_std_lstm = pd.DataFrame(mse_lstm_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_lstm = MSE_std_lstm.ravel()
MSE_gru = pd.DataFrame(mse_gru_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE_gru = MSE_gru.ravel()
MSE_std_gru = pd.DataFrame(mse_gru_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_gru = MSE_std_gru.ravel()
MSE_esn = pd.DataFrame(mse_esn_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE_esn = MSE_esn.ravel()
MSE_std_esn = pd.DataFrame(mse_esn_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_esn = MSE_std_esn.ravel()
ax.errorbar(K_mlp, MSE_mlp, MSE_std_mlp, linestyle='None', marker='x', label='MLP')
ax.errorbar(K_lstm, MSE_lstm, MSE_std_lstm, linestyle='None', marker='d', label='LSTM')
ax.errorbar(K_gru, MSE_gru, MSE_std_gru, linestyle='None', marker='H', label='GRU')
ax.errorbar(K_esn, MSE_esn, MSE_std_esn, linestyle='None', marker='*', label='ESN')
ax.legend()
ax.set_xlabel('$K$')
ax.set_ylabel('Erro Quadrático Médio')
#ax.set_title('Desempenho nas equações de Mackey-Glass para as redes analisadas\n com os três melhores valores de $K$')
sns.despine()
ax.grid()
fig.savefig("images/results/mackeyglass-3best.pdf")
print("Gráficos gerados!")
print("")

# gerando os gráficos com as comparações dos melhores modelos para o melhor K
print("Gerando os gráficos para o melhor valor de K de cada modelo")
# importando os dados
mse_mlp_henon = pd.read_csv('results/mlp-basica/mlp-basica-henon-best.csv')
mse_mlp_logistic = pd.read_csv('results/mlp-basica/mlp-basica-logistic-best.csv')
mse_mlp_lorenz = pd.read_csv('results/mlp-basica/mlp-basica-lorenz-best.csv')
mse_mlp_mackeyglass = pd.read_csv('results/mlp-basica/mlp-basica-mackeyglass-best.csv')
mse_lstm_henon = pd.read_csv('results/lstm/lstm-henon-best.csv')
mse_lstm_logistic = pd.read_csv('results/lstm/lstm-logistic-best.csv')
mse_lstm_lorenz = pd.read_csv('results/lstm/lstm-lorenz-best.csv')
mse_lstm_mackeyglass = pd.read_csv('results/lstm/lstm-mackeyglass-best.csv')
mse_gru_henon = pd.read_csv('results/gru/gru-henon-best.csv')
mse_gru_logistic = pd.read_csv('results/gru/gru-logistic-best.csv')
mse_gru_lorenz = pd.read_csv('results/gru/gru-lorenz-best.csv')
mse_gru_mackeyglass = pd.read_csv('results/gru/gru-mackeyglass-best.csv')
mse_esn_henon = pd.read_csv('results/esn/esn-henon-best.csv')
mse_esn_logistic = pd.read_csv('results/esn/esn-logistic-best.csv')
mse_esn_lorenz = pd.read_csv('results/esn/esn-lorenz-best.csv')
mse_esn_mackeyglass = pd.read_csv('results/esn/esn-mackeyglass-best.csv')

# comparacao entre modelos

# vetor de modelos
mlp_model = [1]
lstm_model = [2]
gru_model = [3]
esn_model = [4]
models = [mlp_model, lstm_model, gru_model, esn_model]

# henon
fig, ax = plt.subplots(tight_layout=True, figsize=(7, 5))
MSE_mlp = pd.DataFrame(mse_mlp_henon, columns=['Media do MSE']).to_numpy()
MSE_mlp = MSE_mlp.ravel()
MSE_std_mlp = pd.DataFrame(mse_mlp_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_mlp = MSE_std_mlp.ravel()
MSE_lstm = pd.DataFrame(mse_lstm_henon, columns=['Media do MSE']).to_numpy()
MSE_lstm = MSE_lstm.ravel()
MSE_std_lstm = pd.DataFrame(mse_lstm_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_lstm = MSE_std_lstm.ravel()
MSE_gru = pd.DataFrame(mse_gru_henon, columns=['Media do MSE']).to_numpy()
MSE_gru = MSE_gru.ravel()
MSE_std_gru = pd.DataFrame(mse_gru_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_gru = MSE_std_gru.ravel()
MSE_esn = pd.DataFrame(mse_esn_henon, columns=['Media do MSE']).to_numpy()
MSE_esn = MSE_esn.ravel()
MSE_std_esn = pd.DataFrame(mse_esn_henon, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_esn = MSE_std_esn.ravel()
ax.errorbar(mlp_model, MSE_mlp, MSE_std_mlp, linestyle='None', marker='x', label='MLP ($K = 4$)')
ax.errorbar(lstm_model, MSE_lstm, MSE_std_lstm, linestyle='None', marker='d', label='LSTM ($K = 8$)')
ax.errorbar(gru_model, MSE_gru, MSE_std_gru, linestyle='None', marker='H', label='GRU ($K = 9$)')
ax.errorbar(esn_model, MSE_esn, MSE_std_esn, linestyle='None', marker='*', label='ESN ($K = 1$)')
ax.legend()
ax.set_xlabel('Modelo')
ax.set_ylabel('Erro Quadrático Médio')
ax.set_xticks([1, 2, 3, 4])
ax.set_xticklabels(['MLP', 'LSTM', 'GRU', 'ESN'])

ax.text(mlp_model[0]+0.05, MSE_mlp[0], r"($8.474\pm 6.635$)$\times 10^{-4}$", fontsize='medium')
ax.text(lstm_model[0]+0.05, MSE_lstm[0], r"($1.491\pm 0.752$)$\times 10^{-4}$", fontsize='medium')
ax.text(gru_model[0]+0.05, MSE_gru[0], r"($3.455\pm 1.014$)$\times 10^{-4}$", fontsize='medium')
ax.text(esn_model[0]-0.75, MSE_esn[0], r"($3.232\pm0.549$)$\times 10^{-9}$", fontsize='medium')

#ax.set_title('Desempenho no mapa de Hénon para as redes analisadas\n com o melhor valor de $K$')
sns.despine()
ax.grid()
fig.savefig("images/results/henon-best.pdf")
fig.savefig("reports/congresso-pibic/figures/comparacao-k-henon.pdf")

# logistic
fig, ax = plt.subplots(tight_layout=True, figsize=(7, 5))
MSE_mlp = pd.DataFrame(mse_mlp_logistic, columns=['Media do MSE']).to_numpy()
MSE_mlp = MSE_mlp.ravel()
MSE_std_mlp = pd.DataFrame(mse_mlp_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_mlp = MSE_std_mlp.ravel()
MSE_lstm = pd.DataFrame(mse_lstm_logistic, columns=['Media do MSE']).to_numpy()
MSE_lstm = MSE_lstm.ravel()
MSE_std_lstm = pd.DataFrame(mse_lstm_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_lstm = MSE_std_lstm.ravel()
MSE_gru = pd.DataFrame(mse_gru_logistic, columns=['Media do MSE']).to_numpy()
MSE_gru = MSE_gru.ravel()
MSE_std_gru = pd.DataFrame(mse_gru_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_gru = MSE_std_gru.ravel()
MSE_esn = pd.DataFrame(mse_esn_logistic, columns=['Media do MSE']).to_numpy()
MSE_esn = MSE_esn.ravel()
MSE_std_esn = pd.DataFrame(mse_esn_logistic, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_esn = MSE_std_esn.ravel()
ax.errorbar(mlp_model, MSE_mlp, MSE_std_mlp, linestyle='None', marker='x', label='MLP ($K = 4$)')
ax.errorbar(lstm_model, MSE_lstm, MSE_std_lstm, linestyle='None', marker='d', label='LSTM ($K = 7$)')
ax.errorbar(gru_model, MSE_gru, MSE_std_gru, linestyle='None', marker='H', label='GRU ($K = 8$)')
ax.errorbar(esn_model, MSE_esn, MSE_std_esn, linestyle='None', marker='*', label='ESN ($K = 2$)')
ax.legend()
ax.set_xlabel('Modelo')
ax.set_ylabel('Erro Quadrático Médio')
ax.set_xticks([1, 2, 3, 4])
ax.set_xticklabels(['MLP', 'LSTM', 'GRU', 'ESN'])

ax.text(mlp_model[0]+0.05, MSE_mlp[0], r"($3.572\pm 0.399$)$\times 10^{-4}$", fontsize='medium')
ax.text(lstm_model[0]+0.05, MSE_lstm[0], r"($7.268\pm 4.679$)$\times 10^{-5}$", fontsize='medium')
ax.text(gru_model[0]+0.05, MSE_gru[0], r"($9.782\pm 5.248$)$\times 10^{-5}$", fontsize='medium')
ax.text(esn_model[0]-0.75, MSE_esn[0], r"($1.546\pm 1.651$)$\times 10^{-8}$", fontsize='medium')

#ax.set_title('Desempenho no mapa logístico para as redes analisadas\n com o melhor valor de $K$')
sns.despine()
ax.grid()
fig.savefig("images/results/logistic-best.pdf")
fig.savefig("reports/congresso-pibic/figures/comparacao-k-logistic.pdf")

# sistema de lorenz
fig, ax = plt.subplots(tight_layout=True, figsize=(7, 5))
MSE_mlp = pd.DataFrame(mse_mlp_lorenz, columns=['Media do MSE']).to_numpy()
MSE_mlp = MSE_mlp.ravel()
MSE_std_mlp = pd.DataFrame(mse_mlp_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_mlp = MSE_std_mlp.ravel()
MSE_lstm = pd.DataFrame(mse_lstm_lorenz, columns=['Media do MSE']).to_numpy()
MSE_lstm = MSE_lstm.ravel()
MSE_std_lstm = pd.DataFrame(mse_lstm_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_lstm = MSE_std_lstm.ravel()
MSE_gru = pd.DataFrame(mse_gru_lorenz, columns=['Media do MSE']).to_numpy()
MSE_gru = MSE_gru.ravel()
MSE_std_gru = pd.DataFrame(mse_gru_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_gru = MSE_std_gru.ravel()
MSE_esn = pd.DataFrame(mse_esn_lorenz, columns=['Media do MSE']).to_numpy()
MSE_esn = MSE_esn.ravel()
MSE_std_esn = pd.DataFrame(mse_esn_lorenz, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_esn = MSE_std_esn.ravel()
ax.errorbar(mlp_model, MSE_mlp, MSE_std_mlp, linestyle='None', marker='x', label='MLP ($K = 5$)')
ax.errorbar(lstm_model, MSE_lstm, MSE_std_lstm, linestyle='None', marker='d', label='LSTM ($K = 9$)')
ax.errorbar(gru_model, MSE_gru, MSE_std_gru, linestyle='None', marker='H', label='GRU ($K = 10$)')
ax.errorbar(esn_model, MSE_esn, MSE_std_esn, linestyle='None', marker='*', label='ESN ($K = 2$)')
ax.legend()
ax.set_xlabel('Modelo')
ax.set_ylabel('Erro Quadrático Médio')
ax.set_xticks([1, 2, 3, 4])
ax.set_xticklabels(['MLP', 'LSTM', 'GRU', 'ESN'])

ax.text(mlp_model[0]+0.05, MSE_mlp[0], r"($8.038\pm 2.934$)$\times 10^{-4}$", fontsize='medium')
ax.text(lstm_model[0]+0.05, MSE_lstm[0], r"($1.241\pm 0.234$)$\times 10^{-3}$", fontsize='medium')
ax.text(gru_model[0]+0.05, MSE_gru[0], r"($2.632\pm 1.821$)$\times 10^{-4}$", fontsize='medium')
ax.text(esn_model[0]-0.75, MSE_esn[0], r"($1.523\pm 1.240$)$\times 10^{-6}$", fontsize='medium')

#ax.set_title('Desempenho no sistema de Lorenz para as redes analisadas\n com o melhor valor de $K$')
sns.despine()
ax.grid()
fig.savefig("images/results/lorenz-best.pdf")
fig.savefig("reports/congresso-pibic/figures/comparacao-k-lorenz.pdf")

# mackey-glass
fig, ax = plt.subplots(tight_layout=True, figsize=(7, 5))
MSE_mlp = pd.DataFrame(mse_mlp_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE_mlp = MSE_mlp.ravel()
MSE_std_mlp = pd.DataFrame(mse_mlp_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_mlp = MSE_std_mlp.ravel()
MSE_lstm = pd.DataFrame(mse_lstm_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE_lstm = MSE_lstm.ravel()
MSE_std_lstm = pd.DataFrame(mse_lstm_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_lstm = MSE_std_lstm.ravel()
MSE_gru = pd.DataFrame(mse_gru_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE_gru = MSE_gru.ravel()
MSE_std_gru = pd.DataFrame(mse_gru_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_gru = MSE_std_gru.ravel()
MSE_esn = pd.DataFrame(mse_esn_mackeyglass, columns=['Media do MSE']).to_numpy()
MSE_esn = MSE_esn.ravel()
MSE_std_esn = pd.DataFrame(mse_esn_mackeyglass, columns=['Desvio Padrao do MSE']).to_numpy()
MSE_std_esn = MSE_std_esn.ravel()
ax.errorbar(mlp_model, MSE_mlp, MSE_std_mlp, linestyle='None', marker='x', label='MLP ($K = 7$)')
ax.errorbar(lstm_model, MSE_lstm, MSE_std_lstm, linestyle='None', marker='d', label='LSTM ($K = 7$)')
ax.errorbar(gru_model, MSE_gru, MSE_std_gru, linestyle='None', marker='H', label='GRU ($K = 6$)')
ax.errorbar(esn_model, MSE_esn, MSE_std_esn, linestyle='None', marker='*', label='ESN ($K = 1$)')
ax.legend()
ax.set_xlabel('Modelo')
ax.set_ylabel('Erro Quadrático Médio')

ax.text(mlp_model[0]+0.05, MSE_mlp[0], r"($3.023\pm 0.470$)$\times 10^{-4}$", fontsize='medium')
ax.text(lstm_model[0]+0.05, MSE_lstm[0], r"($4.180\pm 0.972$)$\times 10^{-5}$", fontsize='medium')
ax.text(gru_model[0]+0.05, MSE_gru[0], r"($4.843\pm 0.997$)$\times 10^{-5}$", fontsize='medium')
ax.text(esn_model[0]-0.75, MSE_esn[0], r"($4.380\pm 0.644$)$\times 10^{-7}$", fontsize='medium')

#ax.set_title('Desempenho nas equações de Mackey-Glass para as redes analisadas\n com o melhor valor de $K$')
sns.despine()
ax.grid()
fig.savefig("images/results/mackeyglass-best.pdf")
fig.savefig("reports/congresso-pibic/figures/comparacao-k-mackeyglass.pdf")
print("Gráficos gerados!")
print("")